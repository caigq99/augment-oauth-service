name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: augment-oauth-service-linux-x86_64
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: augment-oauth-service-linux-aarch64
          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: augment-oauth-service-macos-x86_64
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            name: augment-oauth-service-macos-aarch64
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: augment-oauth-service-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Configure cross-compilation (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/augment-oauth-service ${{ matrix.name }}
        chmod +x ${{ matrix.name }}

    - name: Prepare binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/augment-oauth-service.exe ${{ matrix.name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create checksums
      run: |
        for dir in augment-oauth-service-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            sha256sum * > ../checksums-$(basename "$dir").txt
            cd ..
          fi
        done

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Augment OAuth Service ${{ steps.version.outputs.version }}
        body: |
          ## Augment OAuth Service ${{ steps.version.outputs.version }}
          
          ### üöÄ Features
          - OAuth 2.0 PKCE flow implementation
          - Unified API response format
          - Cross-platform binary releases
          - One-click deployment script
          
          ### üì¶ Downloads
          Choose the appropriate binary for your platform:
          - **Linux x86_64**: `augment-oauth-service-linux-x86_64`
          - **Linux ARM64**: `augment-oauth-service-linux-aarch64`
          - **macOS x86_64**: `augment-oauth-service-macos-x86_64`
          - **macOS ARM64**: `augment-oauth-service-macos-aarch64`
          - **Windows x86_64**: `augment-oauth-service-windows-x86_64.exe`
          
          ### üõ†Ô∏è Quick Install
          ```bash
          # Linux/macOS one-click install
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
          
          # Or manual download
          curl -L -o augment-oauth-service https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/augment-oauth-service-linux-x86_64
          chmod +x augment-oauth-service
          ./augment-oauth-service
          ```
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for dir in augment-oauth-service-*; do
          if [ -d "$dir" ]; then
            asset_path="$dir/$(ls "$dir")"
            asset_name="$(basename "$asset_path")"
            echo "Uploading $asset_name..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$asset_path" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$asset_name"
          fi
        done
        
        # Upload checksums
        for checksum_file in checksums-*.txt; do
          if [ -f "$checksum_file" ]; then
            echo "Uploading $checksum_file..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: text/plain" \
              --data-binary @"$checksum_file" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$checksum_file"
          fi
        done
